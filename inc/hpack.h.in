/*-
 * Copyright (c) 2016 Dridi Boukelmoune
 * All rights reserved.
 *
 * Author: Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * HPACK: Header Compression for HTTP/2 (RFC 7541)
 */

struct hpack;

enum hpack_result_e {
#define HPR(r, v, d, l)	HPACK_RES_##r	= v,
#include "tbl/hpack_tbl.h"
#undef HPR
};

enum hpack_event_e {
#define HPE(e, v, d, l)	HPACK_EVT_##e	= v,
#include "tbl/hpack_tbl.h"
#undef HPE
};

/* hpack_alloc */

typedef void * hpack_malloc_f(size_t, void *);
typedef void * hpack_realloc_f(void *, size_t, void *);
typedef void   hpack_free_f(void *, void *);

struct hpack_alloc {
	hpack_malloc_f	*malloc;
	hpack_realloc_f	*realloc;
	hpack_free_f	*free;
	void		*priv;
};

extern const struct hpack_alloc *hpack_default_alloc;

struct hpack * hpack_decoder(size_t, const struct hpack_alloc *);
struct hpack * hpack_encoder(size_t, const struct hpack_alloc *);
void hpack_free(struct hpack **);

enum hpack_result_e hpack_resize(struct hpack **, size_t);
enum hpack_result_e hpack_limit(struct hpack *, size_t);
enum hpack_result_e hpack_trim(struct hpack **);

const char * hpack_strerror(enum hpack_result_e);

/* hpack_decode */

typedef void hpack_decoded_f(void *, enum hpack_event_e, const char *,
    size_t);

enum hpack_result_e hpack_decode(struct hpack *, const void *, size_t,
    unsigned, hpack_decoded_f, void *);

/* hpack_encode */

enum hpack_field_e {
	HPACK_FLD_INDEXED	= 0,
	HPACK_FLD_DYNAMIC	= 1,
	HPACK_FLD_LITERAL	= 2,
	HPACK_FLD_NEVER		= 3,
};

enum hpack_compress_e {
	HPACK_IDX = 0x01,
	HPACK_NAM = 0x02,
	HPACK_VAL = 0x04,
};

struct hpack_field {
	union {
		uint16_t	idx;
		const char	*nam;
	};
	const char		*val;
	uint8_t			flg;
};

struct hpack_item {
	union {
		uint16_t		idx;
		struct hpack_field	fld;
	};
	enum hpack_field_e		typ;
};

typedef void hpack_encoded_f(void *, enum hpack_event_e, const void *,
    size_t);

enum hpack_result_e hpack_encode(struct hpack *, const struct hpack_item *,
    size_t, hpack_encoded_f, void *);

enum hpack_result_e hpack_clean_item(struct hpack_item *);

/* hpack_foreach */

enum hpack_result_e hpack_foreach(struct hpack *, hpack_decoded_f, void *);
